# /**
#  * Set the production, test or training server
#  */ 
# RUN_ENV = "PRODUCTION"
RUN_ENV =
# RUN_ENV = "TRAINING"

## FOLIO user account credentials for running fee/fine processes
PRODUCTION_USER_NAME =
PRODUCTION_USER_PASSWORD =
TEST_USER_NAME =
TEST_USER_PASSWORD =
TRAINING_USER_NAME =
TRAINING_USER_PASSWORD =

## FOLIO tenant ID (same across all envs)
FOLIO_TENANT =

## FOLIO Base URLs
TEST_BASE_URL =
TRAINING_BASE_URL =
PRODUCTION_BASE_URL =

##-------------
## Transfer account settings
##
# TRANS_ACTIVE = false
TRANS_ACTIVE =
## Name of account Bursar fines are transferred to
TRANS_ACCOUNT_NAME =
# TRANS_ACCOUNT_NAME = "Bad Debt"
## Service point that transferred under
TRANS_SERVICE_POINT =
## User that the transfers should run under
TRANS_USER_NAME =
## Comment added to the transfer
TRANS_COMMENT =
# MAX_FINES_TO_BE_PULLED = 100000
MAX_FINES_TO_BE_PULLED =
# MAX_CREDITS_TO_BE_PULLED = 100000
MAX_CREDITS_TO_BE_PULLED =
##
##--------------

##----------------------------
##  Transfer Settings
##
# Number of days old the fee should be; default is 0
CHARGES_DAYS_OUTSTANDING =
# Maxium age for the fee; default 1-year
CHARGES_MAX_AGE =
# Number of days in the past to pull credits; default 1 
# CREDIT_DAYS_OUTSTANDING = 1
# CREDIT_DAYS_OUTSTANDING = 3 # include weekend call (monday's report)
CREDIT_DAYS_OUTSTANDING =
##
##-----------------------------

##-----------------------------
#   Filter Settings
# {
#    "name": Display name of the filter; used in some reports
#    "error_message": Error message to be added to the Export log
#    "load": false | name of the JSON file to be imported
#    "flatten": true | false ; Should the JSON file be flattened. This will extract the UUID field from the array and place it in a new array. this is used to match based on the In function, or with files containing match patterns.
#    "filter_field": The field in the charges record that should be compared
#    "field_transform": NONE | COUNT | ;
#    "filter_operator": EQUALS | NOT_EQUAL | ONE_OF | NULL_OR_ONE_OF | LONGER_THAN | SHORTER_THAN | IN_FILE ; operator to compare the field vale to
#    "filter_value": the value to compare to the field. 
# }
#
#
CHARGE_FILTER_1 =
CHARGE_FILTER_2 =
CHARGE_FILTER_3 =
CHARGE_FILTER_4 =
CHARGE_FILTER_5 =
CREDIT_FILTER_1 =
CREDIT_FILTER_2 =
CREDIT_FILTER_3 =
CREDIT_FILTER_4 =
CREDIT_FILTER_5 =

##-----------------------------
#   Reformat Settings
# {
#    "filter_field": The field that holds record that should be reformated
#    "type": LEFT_STRIP | RIGHT_STRIP | REPLACE ; What type of reformatting should be done. 
#                                                   RIGHT_STRIP will remove the characters from the right side of the string as defined by the search_for field. 
#                                                   LEFT_STRIP will remove the characters from the left side of the string as defined by the search_for field. 
#                                                   REPLACE will replace the search_for string with the replace_with string.
#    "search_for": What value should be searched for and or what charter should be stripped from the left or right.
#    "replace_with": Used with REPLACE type. What the value should be replaced with.
#    "new_field": The field name where the changes are to be added to. This can be the same value as the filter_field
# }
#
#
CHARGE_REFORMAT_1 =
CHARGE_REFORMAT_2 =
CREDIT_REFORMAT_1 =
CREDIT_REFORMAT_2 =
CREDIT_REFORMAT_3 =


##-----------------------------
#   Merge Settings
# {
#    "merge_type": FIELD | FILE ; What type of merge should be done. 
#                                                   FIELD this will combine two fields values into a single field separated byt he given deliminator. 
#                                                   FILE This will use the defined field to match agains the key in a seprate JSON fiel and write that 'value" field contents of tha t fiel to the billing array..
#    "load": false | name of the JSON file to be imported
#    "filter_field": false | Name of field that should be matched to the key in the JSON file.
#    "new_field": The field name where the changes are to be added to. This can be the same value as the filter_field
#    "field_1": First field when combine 2 current data fields
#    "field_2": Second field when combine 2 current data fields
#    "field_deliminator": The deliminator to use when combining filed_1 and field_2
#    "field_transform": NONE | COUNT | ;
# }
#
#
CHARGE_MERGE_1 =
CHARGE_MERGE_2 =
CREDIT_MERGE_1 =
CREDIT_MERGE_2 =

##-----------------------------
#   Export Settings
EXPORT_1 =
EXPORT_2 =
EXPORT_3 =
EXPORT_4 =
EXPORT_5 =
EXPORT_6 =

#
#   File Delivery type
#   AWS - Uploaded to a AWS bucket
#   FTP - uploaded to a FTP site
#   JSON - Send as the payload in the JSON request;
#       The text of each file will be sent as the payload ie
#        {"lib011220b":"FILE CONTENTS"}
#   LOCAL - Save toa  local directly

# # AWS Settings
# DELIVERY_METHOD="AWS"
# AWS_ID = ""
# AWS_SECRET = ""
# AWS_BUCKET = ""
# AWS_LOCATION = "eu-west-1"

# # FTP Settings
# DELIVERY_METHOD="FTP"
# FTP_USER = "test"
# FTP_PASSWORD = "password"
# FTP_HOST = "10.48.6.218"
# FTP_SECURE = false
# FTP_BASE_DIRECTORY = "/"
# FTP_AWS_ID = ""
# FTP_AWS_SECRET = ""
# FTP_AWS_BUCKET = ""
# FTP_AWS_FILE_NAME = ""
# FTP_KNOWN_HOST = ""

# Send as the payload in the JSON request
# DELIVERY_METHOD="JSON"

# # Save local settings
DELIVERY_METHOD=
LOCAL_DIR =